/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 821.0, "minX": 0.0, "maxY": 9486.0, "series": [{"data": [[0.0, 920.0], [0.1, 920.0], [0.2, 920.0], [0.3, 920.0], [0.4, 920.0], [0.5, 924.0], [0.6, 924.0], [0.7, 924.0], [0.8, 924.0], [0.9, 931.0], [1.0, 931.0], [1.1, 931.0], [1.2, 931.0], [1.3, 931.0], [1.4, 931.0], [1.5, 931.0], [1.6, 931.0], [1.7, 935.0], [1.8, 935.0], [1.9, 935.0], [2.0, 935.0], [2.1, 936.0], [2.2, 936.0], [2.3, 936.0], [2.4, 936.0], [2.5, 940.0], [2.6, 940.0], [2.7, 940.0], [2.8, 940.0], [2.9, 940.0], [3.0, 943.0], [3.1, 943.0], [3.2, 943.0], [3.3, 943.0], [3.4, 943.0], [3.5, 943.0], [3.6, 943.0], [3.7, 943.0], [3.8, 943.0], [3.9, 943.0], [4.0, 943.0], [4.1, 943.0], [4.2, 943.0], [4.3, 943.0], [4.4, 943.0], [4.5, 943.0], [4.6, 949.0], [4.7, 949.0], [4.8, 949.0], [4.9, 949.0], [5.0, 955.0], [5.1, 955.0], [5.2, 955.0], [5.3, 955.0], [5.4, 955.0], [5.5, 955.0], [5.6, 955.0], [5.7, 955.0], [5.8, 955.0], [5.9, 981.0], [6.0, 981.0], [6.1, 981.0], [6.2, 981.0], [6.3, 982.0], [6.4, 982.0], [6.5, 982.0], [6.6, 982.0], [6.7, 984.0], [6.8, 984.0], [6.9, 984.0], [7.0, 984.0], [7.1, 992.0], [7.2, 992.0], [7.3, 992.0], [7.4, 992.0], [7.5, 992.0], [7.6, 994.0], [7.7, 994.0], [7.8, 994.0], [7.9, 994.0], [8.0, 1046.0], [8.1, 1046.0], [8.2, 1046.0], [8.3, 1046.0], [8.4, 1047.0], [8.5, 1047.0], [8.6, 1047.0], [8.7, 1047.0], [8.8, 1049.0], [8.9, 1049.0], [9.0, 1049.0], [9.1, 1049.0], [9.2, 1051.0], [9.3, 1051.0], [9.4, 1051.0], [9.5, 1051.0], [9.6, 1068.0], [9.7, 1068.0], [9.8, 1068.0], [9.9, 1068.0], [10.0, 1069.0], [10.1, 1069.0], [10.2, 1069.0], [10.3, 1069.0], [10.4, 1069.0], [10.5, 1135.0], [10.6, 1135.0], [10.7, 1135.0], [10.8, 1135.0], [10.9, 1139.0], [11.0, 1139.0], [11.1, 1139.0], [11.2, 1139.0], [11.3, 1141.0], [11.4, 1141.0], [11.5, 1141.0], [11.6, 1141.0], [11.7, 1153.0], [11.8, 1153.0], [11.9, 1153.0], [12.0, 1153.0], [12.1, 1179.0], [12.2, 1179.0], [12.3, 1179.0], [12.4, 1179.0], [12.5, 1186.0], [12.6, 1186.0], [12.7, 1186.0], [12.8, 1186.0], [12.9, 1186.0], [13.0, 1218.0], [13.1, 1218.0], [13.2, 1218.0], [13.3, 1218.0], [13.4, 1222.0], [13.5, 1222.0], [13.6, 1222.0], [13.7, 1222.0], [13.8, 1231.0], [13.9, 1231.0], [14.0, 1231.0], [14.1, 1231.0], [14.2, 1247.0], [14.3, 1247.0], [14.4, 1247.0], [14.5, 1247.0], [14.6, 1306.0], [14.7, 1306.0], [14.8, 1306.0], [14.9, 1306.0], [15.0, 1401.0], [15.1, 1401.0], [15.2, 1401.0], [15.3, 1401.0], [15.4, 1401.0], [15.5, 1494.0], [15.6, 1494.0], [15.7, 1494.0], [15.8, 1494.0], [15.9, 1511.0], [16.0, 1511.0], [16.1, 1511.0], [16.2, 1511.0], [16.3, 1872.0], [16.4, 1872.0], [16.5, 1872.0], [16.6, 1872.0], [16.7, 1875.0], [16.8, 1875.0], [16.9, 1875.0], [17.0, 1875.0], [17.1, 2181.0], [17.2, 2181.0], [17.3, 2181.0], [17.4, 2181.0], [17.5, 2277.0], [17.6, 2277.0], [17.7, 2277.0], [17.8, 2277.0], [17.9, 2277.0], [18.0, 2325.0], [18.1, 2325.0], [18.2, 2325.0], [18.3, 2325.0], [18.4, 2395.0], [18.5, 2395.0], [18.6, 2395.0], [18.7, 2395.0], [18.8, 2396.0], [18.9, 2396.0], [19.0, 2396.0], [19.1, 2396.0], [19.2, 2488.0], [19.3, 2488.0], [19.4, 2488.0], [19.5, 2488.0], [19.6, 2488.0], [19.7, 2488.0], [19.8, 2488.0], [19.9, 2488.0], [20.0, 2522.0], [20.1, 2522.0], [20.2, 2522.0], [20.3, 2522.0], [20.4, 2522.0], [20.5, 2685.0], [20.6, 2685.0], [20.7, 2685.0], [20.8, 2685.0], [20.9, 2735.0], [21.0, 2735.0], [21.1, 2735.0], [21.2, 2735.0], [21.3, 2825.0], [21.4, 2825.0], [21.5, 2825.0], [21.6, 2825.0], [21.7, 2863.0], [21.8, 2863.0], [21.9, 2863.0], [22.0, 2863.0], [22.1, 2986.0], [22.2, 2986.0], [22.3, 2986.0], [22.4, 2986.0], [22.5, 2986.0], [22.6, 3009.0], [22.7, 3009.0], [22.8, 3009.0], [22.9, 3009.0], [23.0, 3010.0], [23.1, 3010.0], [23.2, 3010.0], [23.3, 3010.0], [23.4, 3073.0], [23.5, 3073.0], [23.6, 3073.0], [23.7, 3073.0], [23.8, 3074.0], [23.9, 3074.0], [24.0, 3074.0], [24.1, 3074.0], [24.2, 3088.0], [24.3, 3088.0], [24.4, 3088.0], [24.5, 3088.0], [24.6, 3182.0], [24.7, 3182.0], [24.8, 3182.0], [24.9, 3182.0], [25.0, 3182.0], [25.1, 3183.0], [25.2, 3183.0], [25.3, 3183.0], [25.4, 3183.0], [25.5, 3228.0], [25.6, 3228.0], [25.7, 3228.0], [25.8, 3228.0], [25.9, 3384.0], [26.0, 3384.0], [26.1, 3384.0], [26.2, 3384.0], [26.3, 3517.0], [26.4, 3517.0], [26.5, 3517.0], [26.6, 3517.0], [26.7, 3544.0], [26.8, 3544.0], [26.9, 3544.0], [27.0, 3544.0], [27.1, 3602.0], [27.2, 3602.0], [27.3, 3602.0], [27.4, 3602.0], [27.5, 3602.0], [27.6, 3666.0], [27.7, 3666.0], [27.8, 3666.0], [27.9, 3666.0], [28.0, 3778.0], [28.1, 3778.0], [28.2, 3778.0], [28.3, 3778.0], [28.4, 3784.0], [28.5, 3784.0], [28.6, 3784.0], [28.7, 3784.0], [28.8, 3791.0], [28.9, 3791.0], [29.0, 3791.0], [29.1, 3791.0], [29.2, 3791.0], [29.3, 3791.0], [29.4, 3791.0], [29.5, 3791.0], [29.6, 3798.0], [29.7, 3798.0], [29.8, 3798.0], [29.9, 3798.0], [30.0, 3798.0], [30.1, 3798.0], [30.2, 3798.0], [30.3, 3798.0], [30.4, 3798.0], [30.5, 3829.0], [30.6, 3829.0], [30.7, 3829.0], [30.8, 3829.0], [30.9, 3852.0], [31.0, 3852.0], [31.1, 3852.0], [31.2, 3852.0], [31.3, 3861.0], [31.4, 3861.0], [31.5, 3861.0], [31.6, 3861.0], [31.7, 4027.0], [31.8, 4027.0], [31.9, 4027.0], [32.0, 4027.0], [32.1, 4029.0], [32.2, 4029.0], [32.3, 4029.0], [32.4, 4029.0], [32.5, 4029.0], [32.6, 4038.0], [32.7, 4038.0], [32.8, 4038.0], [32.9, 4038.0], [33.0, 4078.0], [33.1, 4078.0], [33.2, 4078.0], [33.3, 4078.0], [33.4, 4085.0], [33.5, 4085.0], [33.6, 4085.0], [33.7, 4085.0], [33.8, 4120.0], [33.9, 4120.0], [34.0, 4120.0], [34.1, 4120.0], [34.2, 4129.0], [34.3, 4129.0], [34.4, 4129.0], [34.5, 4129.0], [34.6, 4141.0], [34.7, 4141.0], [34.8, 4141.0], [34.9, 4141.0], [35.0, 4141.0], [35.1, 4146.0], [35.2, 4146.0], [35.3, 4146.0], [35.4, 4146.0], [35.5, 4146.0], [35.6, 4146.0], [35.7, 4146.0], [35.8, 4146.0], [35.9, 4146.0], [36.0, 4146.0], [36.1, 4146.0], [36.2, 4146.0], [36.3, 4164.0], [36.4, 4164.0], [36.5, 4164.0], [36.6, 4164.0], [36.7, 4168.0], [36.8, 4168.0], [36.9, 4168.0], [37.0, 4168.0], [37.1, 4173.0], [37.2, 4173.0], [37.3, 4173.0], [37.4, 4173.0], [37.5, 4192.0], [37.6, 4192.0], [37.7, 4192.0], [37.8, 4192.0], [37.9, 4192.0], [38.0, 4192.0], [38.1, 4192.0], [38.2, 4192.0], [38.3, 4192.0], [38.4, 4239.0], [38.5, 4239.0], [38.6, 4239.0], [38.7, 4239.0], [38.8, 4273.0], [38.9, 4273.0], [39.0, 4273.0], [39.1, 4273.0], [39.2, 4287.0], [39.3, 4287.0], [39.4, 4287.0], [39.5, 4287.0], [39.6, 4294.0], [39.7, 4294.0], [39.8, 4294.0], [39.9, 4294.0], [40.0, 4302.0], [40.1, 4302.0], [40.2, 4302.0], [40.3, 4302.0], [40.4, 4302.0], [40.5, 4338.0], [40.6, 4338.0], [40.7, 4338.0], [40.8, 4338.0], [40.9, 4342.0], [41.0, 4342.0], [41.1, 4342.0], [41.2, 4342.0], [41.3, 4343.0], [41.4, 4343.0], [41.5, 4343.0], [41.6, 4343.0], [41.7, 4365.0], [41.8, 4365.0], [41.9, 4365.0], [42.0, 4365.0], [42.1, 4384.0], [42.2, 4384.0], [42.3, 4384.0], [42.4, 4384.0], [42.5, 4384.0], [42.6, 4384.0], [42.7, 4384.0], [42.8, 4384.0], [42.9, 4384.0], [43.0, 4390.0], [43.1, 4390.0], [43.2, 4390.0], [43.3, 4390.0], [43.4, 4403.0], [43.5, 4403.0], [43.6, 4403.0], [43.7, 4403.0], [43.8, 4435.0], [43.9, 4435.0], [44.0, 4435.0], [44.1, 4435.0], [44.2, 4447.0], [44.3, 4447.0], [44.4, 4447.0], [44.5, 4447.0], [44.6, 4465.0], [44.7, 4465.0], [44.8, 4465.0], [44.9, 4465.0], [45.0, 4486.0], [45.1, 4486.0], [45.2, 4486.0], [45.3, 4486.0], [45.4, 4486.0], [45.5, 4486.0], [45.6, 4486.0], [45.7, 4486.0], [45.8, 4486.0], [45.9, 4490.0], [46.0, 4490.0], [46.1, 4490.0], [46.2, 4490.0], [46.3, 4491.0], [46.4, 4491.0], [46.5, 4491.0], [46.6, 4491.0], [46.7, 4508.0], [46.8, 4508.0], [46.9, 4508.0], [47.0, 4508.0], [47.1, 4514.0], [47.2, 4514.0], [47.3, 4514.0], [47.4, 4514.0], [47.5, 4522.0], [47.6, 4522.0], [47.7, 4522.0], [47.8, 4522.0], [47.9, 4522.0], [48.0, 4530.0], [48.1, 4530.0], [48.2, 4530.0], [48.3, 4530.0], [48.4, 4549.0], [48.5, 4549.0], [48.6, 4549.0], [48.7, 4549.0], [48.8, 4552.0], [48.9, 4552.0], [49.0, 4552.0], [49.1, 4552.0], [49.2, 4553.0], [49.3, 4553.0], [49.4, 4553.0], [49.5, 4553.0], [49.6, 4553.0], [49.7, 4553.0], [49.8, 4553.0], [49.9, 4553.0], [50.0, 4558.0], [50.1, 4558.0], [50.2, 4558.0], [50.3, 4558.0], [50.4, 4558.0], [50.5, 4586.0], [50.6, 4586.0], [50.7, 4586.0], [50.8, 4586.0], [50.9, 4586.0], [51.0, 4586.0], [51.1, 4586.0], [51.2, 4586.0], [51.3, 4600.0], [51.4, 4600.0], [51.5, 4600.0], [51.6, 4600.0], [51.7, 4605.0], [51.8, 4605.0], [51.9, 4605.0], [52.0, 4605.0], [52.1, 4605.0], [52.2, 4605.0], [52.3, 4605.0], [52.4, 4605.0], [52.5, 4605.0], [52.6, 4605.0], [52.7, 4605.0], [52.8, 4605.0], [52.9, 4605.0], [53.0, 4608.0], [53.1, 4608.0], [53.2, 4608.0], [53.3, 4608.0], [53.4, 4610.0], [53.5, 4610.0], [53.6, 4610.0], [53.7, 4610.0], [53.8, 4611.0], [53.9, 4611.0], [54.0, 4611.0], [54.1, 4611.0], [54.2, 4638.0], [54.3, 4638.0], [54.4, 4638.0], [54.5, 4638.0], [54.6, 4638.0], [54.7, 4638.0], [54.8, 4638.0], [54.9, 4638.0], [55.0, 4643.0], [55.1, 4643.0], [55.2, 4643.0], [55.3, 4643.0], [55.4, 4643.0], [55.5, 4658.0], [55.6, 4658.0], [55.7, 4658.0], [55.8, 4658.0], [55.9, 4666.0], [56.0, 4666.0], [56.1, 4666.0], [56.2, 4666.0], [56.3, 4668.0], [56.4, 4668.0], [56.5, 4668.0], [56.6, 4668.0], [56.7, 4689.0], [56.8, 4689.0], [56.9, 4689.0], [57.0, 4689.0], [57.1, 4696.0], [57.2, 4696.0], [57.3, 4696.0], [57.4, 4696.0], [57.5, 4697.0], [57.6, 4697.0], [57.7, 4697.0], [57.8, 4697.0], [57.9, 4697.0], [58.0, 4740.0], [58.1, 4740.0], [58.2, 4740.0], [58.3, 4740.0], [58.4, 4749.0], [58.5, 4749.0], [58.6, 4749.0], [58.7, 4749.0], [58.8, 4750.0], [58.9, 4750.0], [59.0, 4750.0], [59.1, 4750.0], [59.2, 4750.0], [59.3, 4750.0], [59.4, 4750.0], [59.5, 4750.0], [59.6, 4816.0], [59.7, 4816.0], [59.8, 4816.0], [59.9, 4816.0], [60.0, 4822.0], [60.1, 4822.0], [60.2, 4822.0], [60.3, 4822.0], [60.4, 4822.0], [60.5, 4835.0], [60.6, 4835.0], [60.7, 4835.0], [60.8, 4835.0], [60.9, 4880.0], [61.0, 4880.0], [61.1, 4880.0], [61.2, 4880.0], [61.3, 4881.0], [61.4, 4881.0], [61.5, 4881.0], [61.6, 4881.0], [61.7, 4882.0], [61.8, 4882.0], [61.9, 4882.0], [62.0, 4882.0], [62.1, 4882.0], [62.2, 4882.0], [62.3, 4882.0], [62.4, 4882.0], [62.5, 4896.0], [62.6, 4896.0], [62.7, 4896.0], [62.8, 4896.0], [62.9, 4896.0], [63.0, 4896.0], [63.1, 4896.0], [63.2, 4896.0], [63.3, 4896.0], [63.4, 4896.0], [63.5, 4896.0], [63.6, 4896.0], [63.7, 4896.0], [63.8, 4896.0], [63.9, 4896.0], [64.0, 4896.0], [64.1, 4896.0], [64.2, 4897.0], [64.3, 4897.0], [64.4, 4897.0], [64.5, 4897.0], [64.6, 4929.0], [64.7, 4929.0], [64.8, 4929.0], [64.9, 4929.0], [65.0, 4945.0], [65.1, 4945.0], [65.2, 4945.0], [65.3, 4945.0], [65.4, 4945.0], [65.5, 4961.0], [65.6, 4961.0], [65.7, 4961.0], [65.8, 4961.0], [65.9, 4976.0], [66.0, 4976.0], [66.1, 4976.0], [66.2, 4976.0], [66.3, 4989.0], [66.4, 4989.0], [66.5, 4989.0], [66.6, 4989.0], [66.7, 5019.0], [66.8, 5019.0], [66.9, 5019.0], [67.0, 5019.0], [67.1, 5040.0], [67.2, 5040.0], [67.3, 5040.0], [67.4, 5040.0], [67.5, 5085.0], [67.6, 5085.0], [67.7, 5085.0], [67.8, 5085.0], [67.9, 5085.0], [68.0, 5086.0], [68.1, 5086.0], [68.2, 5086.0], [68.3, 5086.0], [68.4, 5094.0], [68.5, 5094.0], [68.6, 5094.0], [68.7, 5094.0], [68.8, 5106.0], [68.9, 5106.0], [69.0, 5106.0], [69.1, 5106.0], [69.2, 5124.0], [69.3, 5124.0], [69.4, 5124.0], [69.5, 5124.0], [69.6, 5126.0], [69.7, 5126.0], [69.8, 5126.0], [69.9, 5126.0], [70.0, 5126.0], [70.1, 5126.0], [70.2, 5126.0], [70.3, 5126.0], [70.4, 5126.0], [70.5, 5133.0], [70.6, 5133.0], [70.7, 5133.0], [70.8, 5133.0], [70.9, 5133.0], [71.0, 5133.0], [71.1, 5133.0], [71.2, 5133.0], [71.3, 5172.0], [71.4, 5172.0], [71.5, 5172.0], [71.6, 5172.0], [71.7, 5195.0], [71.8, 5195.0], [71.9, 5195.0], [72.0, 5195.0], [72.1, 5204.0], [72.2, 5204.0], [72.3, 5204.0], [72.4, 5204.0], [72.5, 5238.0], [72.6, 5238.0], [72.7, 5238.0], [72.8, 5238.0], [72.9, 5238.0], [73.0, 5248.0], [73.1, 5248.0], [73.2, 5248.0], [73.3, 5248.0], [73.4, 5282.0], [73.5, 5282.0], [73.6, 5282.0], [73.7, 5282.0], [73.8, 5288.0], [73.9, 5288.0], [74.0, 5288.0], [74.1, 5288.0], [74.2, 5290.0], [74.3, 5290.0], [74.4, 5290.0], [74.5, 5290.0], [74.6, 5297.0], [74.7, 5297.0], [74.8, 5297.0], [74.9, 5297.0], [75.0, 5297.0], [75.1, 5308.0], [75.2, 5308.0], [75.3, 5308.0], [75.4, 5308.0], [75.5, 5312.0], [75.6, 5312.0], [75.7, 5312.0], [75.8, 5312.0], [75.9, 5328.0], [76.0, 5328.0], [76.1, 5328.0], [76.2, 5328.0], [76.3, 5338.0], [76.4, 5338.0], [76.5, 5338.0], [76.6, 5338.0], [76.7, 5368.0], [76.8, 5368.0], [76.9, 5368.0], [77.0, 5368.0], [77.1, 5369.0], [77.2, 5369.0], [77.3, 5369.0], [77.4, 5369.0], [77.5, 5369.0], [77.6, 5377.0], [77.7, 5377.0], [77.8, 5377.0], [77.9, 5377.0], [78.0, 5378.0], [78.1, 5378.0], [78.2, 5378.0], [78.3, 5378.0], [78.4, 5379.0], [78.5, 5379.0], [78.6, 5379.0], [78.7, 5379.0], [78.8, 5380.0], [78.9, 5380.0], [79.0, 5380.0], [79.1, 5380.0], [79.2, 5417.0], [79.3, 5417.0], [79.4, 5417.0], [79.5, 5417.0], [79.6, 5451.0], [79.7, 5451.0], [79.8, 5451.0], [79.9, 5451.0], [80.0, 5451.0], [80.1, 5452.0], [80.2, 5452.0], [80.3, 5452.0], [80.4, 5452.0], [80.5, 5452.0], [80.6, 5452.0], [80.7, 5452.0], [80.8, 5452.0], [80.9, 5470.0], [81.0, 5470.0], [81.1, 5470.0], [81.2, 5470.0], [81.3, 5494.0], [81.4, 5494.0], [81.5, 5494.0], [81.6, 5494.0], [81.7, 5505.0], [81.8, 5505.0], [81.9, 5505.0], [82.0, 5505.0], [82.1, 5507.0], [82.2, 5507.0], [82.3, 5507.0], [82.4, 5507.0], [82.5, 5507.0], [82.6, 5530.0], [82.7, 5530.0], [82.8, 5530.0], [82.9, 5530.0], [83.0, 5540.0], [83.1, 5540.0], [83.2, 5540.0], [83.3, 5540.0], [83.4, 5572.0], [83.5, 5572.0], [83.6, 5572.0], [83.7, 5572.0], [83.8, 5583.0], [83.9, 5583.0], [84.0, 5583.0], [84.1, 5583.0], [84.2, 5589.0], [84.3, 5589.0], [84.4, 5589.0], [84.5, 5589.0], [84.6, 5632.0], [84.7, 5632.0], [84.8, 5632.0], [84.9, 5632.0], [85.0, 5632.0], [85.1, 5635.0], [85.2, 5635.0], [85.3, 5635.0], [85.4, 5635.0], [85.5, 5646.0], [85.6, 5646.0], [85.7, 5646.0], [85.8, 5646.0], [85.9, 5647.0], [86.0, 5647.0], [86.1, 5647.0], [86.2, 5647.0], [86.3, 5685.0], [86.4, 5685.0], [86.5, 5685.0], [86.6, 5685.0], [86.7, 5723.0], [86.8, 5723.0], [86.9, 5723.0], [87.0, 5723.0], [87.1, 5734.0], [87.2, 5734.0], [87.3, 5734.0], [87.4, 5734.0], [87.5, 5734.0], [87.6, 5806.0], [87.7, 5806.0], [87.8, 5806.0], [87.9, 5806.0], [88.0, 5808.0], [88.1, 5808.0], [88.2, 5808.0], [88.3, 5808.0], [88.4, 5820.0], [88.5, 5820.0], [88.6, 5820.0], [88.7, 5820.0], [88.8, 5861.0], [88.9, 5861.0], [89.0, 5861.0], [89.1, 5861.0], [89.2, 5873.0], [89.3, 5873.0], [89.4, 5873.0], [89.5, 5873.0], [89.6, 6027.0], [89.7, 6027.0], [89.8, 6027.0], [89.9, 6027.0], [90.0, 6027.0], [90.1, 6029.0], [90.2, 6029.0], [90.3, 6029.0], [90.4, 6029.0], [90.5, 6029.0], [90.6, 6029.0], [90.7, 6029.0], [90.8, 6029.0], [90.9, 6093.0], [91.0, 6093.0], [91.1, 6093.0], [91.2, 6093.0], [91.3, 6094.0], [91.4, 6094.0], [91.5, 6094.0], [91.6, 6094.0], [91.7, 6158.0], [91.8, 6158.0], [91.9, 6158.0], [92.0, 6158.0], [92.1, 6442.0], [92.2, 6442.0], [92.3, 6442.0], [92.4, 6442.0], [92.5, 6442.0], [92.6, 6526.0], [92.7, 6526.0], [92.8, 6526.0], [92.9, 6526.0], [93.0, 6585.0], [93.1, 6585.0], [93.2, 6585.0], [93.3, 6585.0], [93.4, 6668.0], [93.5, 6668.0], [93.6, 6668.0], [93.7, 6668.0], [93.8, 6668.0], [93.9, 6668.0], [94.0, 6668.0], [94.1, 6668.0], [94.2, 6817.0], [94.3, 6817.0], [94.4, 6817.0], [94.5, 6817.0], [94.6, 6876.0], [94.7, 6876.0], [94.8, 6876.0], [94.9, 6876.0], [95.0, 6876.0], [95.1, 7083.0], [95.2, 7083.0], [95.3, 7083.0], [95.4, 7083.0], [95.5, 7109.0], [95.6, 7109.0], [95.7, 7109.0], [95.8, 7109.0], [95.9, 7122.0], [96.0, 7122.0], [96.1, 7122.0], [96.2, 7122.0], [96.3, 7234.0], [96.4, 7234.0], [96.5, 7234.0], [96.6, 7234.0], [96.7, 7256.0], [96.8, 7256.0], [96.9, 7256.0], [97.0, 7256.0], [97.1, 7384.0], [97.2, 7384.0], [97.3, 7384.0], [97.4, 7384.0], [97.5, 7384.0], [97.6, 7384.0], [97.7, 7384.0], [97.8, 7384.0], [97.9, 7384.0], [98.0, 7529.0], [98.1, 7529.0], [98.2, 7529.0], [98.3, 7529.0], [98.4, 7597.0], [98.5, 7597.0], [98.6, 7597.0], [98.7, 7597.0], [98.8, 7598.0], [98.9, 7598.0], [99.0, 7598.0], [99.1, 7598.0], [99.2, 7599.0], [99.3, 7599.0], [99.4, 7599.0], [99.5, 7599.0], [99.6, 7745.0], [99.7, 7745.0], [99.8, 7745.0], [99.9, 7745.0], [100.0, 7745.0]], "isOverall": false, "label": "HTTP Request 2", "isController": false}, {"data": [[0.0, 1320.0], [0.1, 1320.0], [0.2, 1320.0], [0.3, 1320.0], [0.4, 1320.0], [0.5, 1320.0], [0.6, 1320.0], [0.7, 1320.0], [0.8, 1320.0], [0.9, 1325.0], [1.0, 1325.0], [1.1, 1325.0], [1.2, 1325.0], [1.3, 1326.0], [1.4, 1326.0], [1.5, 1326.0], [1.6, 1326.0], [1.7, 1330.0], [1.8, 1330.0], [1.9, 1330.0], [2.0, 1330.0], [2.1, 1330.0], [2.2, 1330.0], [2.3, 1330.0], [2.4, 1330.0], [2.5, 1331.0], [2.6, 1331.0], [2.7, 1331.0], [2.8, 1331.0], [2.9, 1331.0], [3.0, 1331.0], [3.1, 1331.0], [3.2, 1331.0], [3.3, 1331.0], [3.4, 1334.0], [3.5, 1334.0], [3.6, 1334.0], [3.7, 1334.0], [3.8, 1335.0], [3.9, 1335.0], [4.0, 1335.0], [4.1, 1335.0], [4.2, 1336.0], [4.3, 1336.0], [4.4, 1336.0], [4.5, 1336.0], [4.6, 1337.0], [4.7, 1337.0], [4.8, 1337.0], [4.9, 1337.0], [5.0, 1337.0], [5.1, 1338.0], [5.2, 1338.0], [5.3, 1338.0], [5.4, 1338.0], [5.5, 1343.0], [5.6, 1343.0], [5.7, 1343.0], [5.8, 1343.0], [5.9, 1345.0], [6.0, 1345.0], [6.1, 1345.0], [6.2, 1345.0], [6.3, 1346.0], [6.4, 1346.0], [6.5, 1346.0], [6.6, 1346.0], [6.7, 1349.0], [6.8, 1349.0], [6.9, 1349.0], [7.0, 1349.0], [7.1, 1349.0], [7.2, 1349.0], [7.3, 1349.0], [7.4, 1349.0], [7.5, 1349.0], [7.6, 1349.0], [7.7, 1349.0], [7.8, 1349.0], [7.9, 1349.0], [8.0, 1350.0], [8.1, 1350.0], [8.2, 1350.0], [8.3, 1350.0], [8.4, 1357.0], [8.5, 1357.0], [8.6, 1357.0], [8.7, 1357.0], [8.8, 1365.0], [8.9, 1365.0], [9.0, 1365.0], [9.1, 1365.0], [9.2, 1377.0], [9.3, 1377.0], [9.4, 1377.0], [9.5, 1377.0], [9.6, 1379.0], [9.7, 1379.0], [9.8, 1379.0], [9.9, 1379.0], [10.0, 1389.0], [10.1, 1389.0], [10.2, 1389.0], [10.3, 1389.0], [10.4, 1389.0], [10.5, 1393.0], [10.6, 1393.0], [10.7, 1393.0], [10.8, 1393.0], [10.9, 1393.0], [11.0, 1393.0], [11.1, 1393.0], [11.2, 1393.0], [11.3, 1393.0], [11.4, 1393.0], [11.5, 1393.0], [11.6, 1393.0], [11.7, 1394.0], [11.8, 1394.0], [11.9, 1394.0], [12.0, 1394.0], [12.1, 1397.0], [12.2, 1397.0], [12.3, 1397.0], [12.4, 1397.0], [12.5, 1447.0], [12.6, 1447.0], [12.7, 1447.0], [12.8, 1447.0], [12.9, 1447.0], [13.0, 1452.0], [13.1, 1452.0], [13.2, 1452.0], [13.3, 1452.0], [13.4, 1452.0], [13.5, 1452.0], [13.6, 1452.0], [13.7, 1452.0], [13.8, 1455.0], [13.9, 1455.0], [14.0, 1455.0], [14.1, 1455.0], [14.2, 1483.0], [14.3, 1483.0], [14.4, 1483.0], [14.5, 1483.0], [14.6, 1500.0], [14.7, 1500.0], [14.8, 1500.0], [14.9, 1500.0], [15.0, 1501.0], [15.1, 1501.0], [15.2, 1501.0], [15.3, 1501.0], [15.4, 1501.0], [15.5, 1502.0], [15.6, 1502.0], [15.7, 1502.0], [15.8, 1502.0], [15.9, 1505.0], [16.0, 1505.0], [16.1, 1505.0], [16.2, 1505.0], [16.3, 1537.0], [16.4, 1537.0], [16.5, 1537.0], [16.6, 1537.0], [16.7, 1542.0], [16.8, 1542.0], [16.9, 1542.0], [17.0, 1542.0], [17.1, 1545.0], [17.2, 1545.0], [17.3, 1545.0], [17.4, 1545.0], [17.5, 1545.0], [17.6, 1545.0], [17.7, 1545.0], [17.8, 1545.0], [17.9, 1545.0], [18.0, 1624.0], [18.1, 1624.0], [18.2, 1624.0], [18.3, 1624.0], [18.4, 1625.0], [18.5, 1625.0], [18.6, 1625.0], [18.7, 1625.0], [18.8, 1626.0], [18.9, 1626.0], [19.0, 1626.0], [19.1, 1626.0], [19.2, 1629.0], [19.3, 1629.0], [19.4, 1629.0], [19.5, 1629.0], [19.6, 1644.0], [19.7, 1644.0], [19.8, 1644.0], [19.9, 1644.0], [20.0, 1644.0], [20.1, 1648.0], [20.2, 1648.0], [20.3, 1648.0], [20.4, 1648.0], [20.5, 1667.0], [20.6, 1667.0], [20.7, 1667.0], [20.8, 1667.0], [20.9, 1712.0], [21.0, 1712.0], [21.1, 1712.0], [21.2, 1712.0], [21.3, 1729.0], [21.4, 1729.0], [21.5, 1729.0], [21.6, 1729.0], [21.7, 1753.0], [21.8, 1753.0], [21.9, 1753.0], [22.0, 1753.0], [22.1, 2158.0], [22.2, 2158.0], [22.3, 2158.0], [22.4, 2158.0], [22.5, 2158.0], [22.6, 2196.0], [22.7, 2196.0], [22.8, 2196.0], [22.9, 2196.0], [23.0, 2352.0], [23.1, 2352.0], [23.2, 2352.0], [23.3, 2352.0], [23.4, 2352.0], [23.5, 2352.0], [23.6, 2352.0], [23.7, 2352.0], [23.8, 2353.0], [23.9, 2353.0], [24.0, 2353.0], [24.1, 2353.0], [24.2, 2359.0], [24.3, 2359.0], [24.4, 2359.0], [24.5, 2359.0], [24.6, 2359.0], [24.7, 2359.0], [24.8, 2359.0], [24.9, 2359.0], [25.0, 2359.0], [25.1, 2542.0], [25.2, 2542.0], [25.3, 2542.0], [25.4, 2542.0], [25.5, 2543.0], [25.6, 2543.0], [25.7, 2543.0], [25.8, 2543.0], [25.9, 2798.0], [26.0, 2798.0], [26.1, 2798.0], [26.2, 2798.0], [26.3, 2818.0], [26.4, 2818.0], [26.5, 2818.0], [26.6, 2818.0], [26.7, 2824.0], [26.8, 2824.0], [26.9, 2824.0], [27.0, 2824.0], [27.1, 2974.0], [27.2, 2974.0], [27.3, 2974.0], [27.4, 2974.0], [27.5, 2974.0], [27.6, 3247.0], [27.7, 3247.0], [27.8, 3247.0], [27.9, 3247.0], [28.0, 3392.0], [28.1, 3392.0], [28.2, 3392.0], [28.3, 3392.0], [28.4, 3408.0], [28.5, 3408.0], [28.6, 3408.0], [28.7, 3408.0], [28.8, 3408.0], [28.9, 3408.0], [29.0, 3408.0], [29.1, 3408.0], [29.2, 3446.0], [29.3, 3446.0], [29.4, 3446.0], [29.5, 3446.0], [29.6, 3752.0], [29.7, 3752.0], [29.8, 3752.0], [29.9, 3752.0], [30.0, 3752.0], [30.1, 3790.0], [30.2, 3790.0], [30.3, 3790.0], [30.4, 3790.0], [30.5, 3790.0], [30.6, 3790.0], [30.7, 3790.0], [30.8, 3790.0], [30.9, 3855.0], [31.0, 3855.0], [31.1, 3855.0], [31.2, 3855.0], [31.3, 3867.0], [31.4, 3867.0], [31.5, 3867.0], [31.6, 3867.0], [31.7, 3867.0], [31.8, 3867.0], [31.9, 3867.0], [32.0, 3867.0], [32.1, 3889.0], [32.2, 3889.0], [32.3, 3889.0], [32.4, 3889.0], [32.5, 3889.0], [32.6, 3890.0], [32.7, 3890.0], [32.8, 3890.0], [32.9, 3890.0], [33.0, 3943.0], [33.1, 3943.0], [33.2, 3943.0], [33.3, 3943.0], [33.4, 4111.0], [33.5, 4111.0], [33.6, 4111.0], [33.7, 4111.0], [33.8, 4112.0], [33.9, 4112.0], [34.0, 4112.0], [34.1, 4112.0], [34.2, 4141.0], [34.3, 4141.0], [34.4, 4141.0], [34.5, 4141.0], [34.6, 4153.0], [34.7, 4153.0], [34.8, 4153.0], [34.9, 4153.0], [35.0, 4153.0], [35.1, 4153.0], [35.2, 4153.0], [35.3, 4153.0], [35.4, 4153.0], [35.5, 4156.0], [35.6, 4156.0], [35.7, 4156.0], [35.8, 4156.0], [35.9, 4179.0], [36.0, 4179.0], [36.1, 4179.0], [36.2, 4179.0], [36.3, 4179.0], [36.4, 4179.0], [36.5, 4179.0], [36.6, 4179.0], [36.7, 4208.0], [36.8, 4208.0], [36.9, 4208.0], [37.0, 4208.0], [37.1, 4288.0], [37.2, 4288.0], [37.3, 4288.0], [37.4, 4288.0], [37.5, 4288.0], [37.6, 4294.0], [37.7, 4294.0], [37.8, 4294.0], [37.9, 4294.0], [38.0, 4304.0], [38.1, 4304.0], [38.2, 4304.0], [38.3, 4304.0], [38.4, 4307.0], [38.5, 4307.0], [38.6, 4307.0], [38.7, 4307.0], [38.8, 4340.0], [38.9, 4340.0], [39.0, 4340.0], [39.1, 4340.0], [39.2, 4340.0], [39.3, 4340.0], [39.4, 4340.0], [39.5, 4340.0], [39.6, 4341.0], [39.7, 4341.0], [39.8, 4341.0], [39.9, 4341.0], [40.0, 4346.0], [40.1, 4346.0], [40.2, 4346.0], [40.3, 4346.0], [40.4, 4346.0], [40.5, 4389.0], [40.6, 4389.0], [40.7, 4389.0], [40.8, 4389.0], [40.9, 4400.0], [41.0, 4400.0], [41.1, 4400.0], [41.2, 4400.0], [41.3, 4400.0], [41.4, 4400.0], [41.5, 4400.0], [41.6, 4400.0], [41.7, 4400.0], [41.8, 4400.0], [41.9, 4400.0], [42.0, 4400.0], [42.1, 4501.0], [42.2, 4501.0], [42.3, 4501.0], [42.4, 4501.0], [42.5, 4538.0], [42.6, 4538.0], [42.7, 4538.0], [42.8, 4538.0], [42.9, 4538.0], [43.0, 4586.0], [43.1, 4586.0], [43.2, 4586.0], [43.3, 4586.0], [43.4, 4590.0], [43.5, 4590.0], [43.6, 4590.0], [43.7, 4590.0], [43.8, 4590.0], [43.9, 4590.0], [44.0, 4590.0], [44.1, 4590.0], [44.2, 4601.0], [44.3, 4601.0], [44.4, 4601.0], [44.5, 4601.0], [44.6, 4619.0], [44.7, 4619.0], [44.8, 4619.0], [44.9, 4619.0], [45.0, 4680.0], [45.1, 4680.0], [45.2, 4680.0], [45.3, 4680.0], [45.4, 4680.0], [45.5, 4682.0], [45.6, 4682.0], [45.7, 4682.0], [45.8, 4682.0], [45.9, 4694.0], [46.0, 4694.0], [46.1, 4694.0], [46.2, 4694.0], [46.3, 4698.0], [46.4, 4698.0], [46.5, 4698.0], [46.6, 4698.0], [46.7, 4704.0], [46.8, 4704.0], [46.9, 4704.0], [47.0, 4704.0], [47.1, 4735.0], [47.2, 4735.0], [47.3, 4735.0], [47.4, 4735.0], [47.5, 4758.0], [47.6, 4758.0], [47.7, 4758.0], [47.8, 4758.0], [47.9, 4758.0], [48.0, 4759.0], [48.1, 4759.0], [48.2, 4759.0], [48.3, 4759.0], [48.4, 4765.0], [48.5, 4765.0], [48.6, 4765.0], [48.7, 4765.0], [48.8, 4768.0], [48.9, 4768.0], [49.0, 4768.0], [49.1, 4768.0], [49.2, 4780.0], [49.3, 4780.0], [49.4, 4780.0], [49.5, 4780.0], [49.6, 4802.0], [49.7, 4802.0], [49.8, 4802.0], [49.9, 4802.0], [50.0, 4810.0], [50.1, 4810.0], [50.2, 4810.0], [50.3, 4810.0], [50.4, 4810.0], [50.5, 4814.0], [50.6, 4814.0], [50.7, 4814.0], [50.8, 4814.0], [50.9, 4816.0], [51.0, 4816.0], [51.1, 4816.0], [51.2, 4816.0], [51.3, 4835.0], [51.4, 4835.0], [51.5, 4835.0], [51.6, 4835.0], [51.7, 4846.0], [51.8, 4846.0], [51.9, 4846.0], [52.0, 4846.0], [52.1, 4858.0], [52.2, 4858.0], [52.3, 4858.0], [52.4, 4858.0], [52.5, 4864.0], [52.6, 4864.0], [52.7, 4864.0], [52.8, 4864.0], [52.9, 4864.0], [53.0, 4865.0], [53.1, 4865.0], [53.2, 4865.0], [53.3, 4865.0], [53.4, 4865.0], [53.5, 4865.0], [53.6, 4865.0], [53.7, 4865.0], [53.8, 4887.0], [53.9, 4887.0], [54.0, 4887.0], [54.1, 4887.0], [54.2, 4899.0], [54.3, 4899.0], [54.4, 4899.0], [54.5, 4899.0], [54.6, 4900.0], [54.7, 4900.0], [54.8, 4900.0], [54.9, 4900.0], [55.0, 4919.0], [55.1, 4919.0], [55.2, 4919.0], [55.3, 4919.0], [55.4, 4919.0], [55.5, 4939.0], [55.6, 4939.0], [55.7, 4939.0], [55.8, 4939.0], [55.9, 4941.0], [56.0, 4941.0], [56.1, 4941.0], [56.2, 4941.0], [56.3, 4945.0], [56.4, 4945.0], [56.5, 4945.0], [56.6, 4945.0], [56.7, 4948.0], [56.8, 4948.0], [56.9, 4948.0], [57.0, 4948.0], [57.1, 4956.0], [57.2, 4956.0], [57.3, 4956.0], [57.4, 4956.0], [57.5, 4996.0], [57.6, 4996.0], [57.7, 4996.0], [57.8, 4996.0], [57.9, 4996.0], [58.0, 4998.0], [58.1, 4998.0], [58.2, 4998.0], [58.3, 4998.0], [58.4, 5016.0], [58.5, 5016.0], [58.6, 5016.0], [58.7, 5016.0], [58.8, 5016.0], [58.9, 5016.0], [59.0, 5016.0], [59.1, 5016.0], [59.2, 5024.0], [59.3, 5024.0], [59.4, 5024.0], [59.5, 5024.0], [59.6, 5024.0], [59.7, 5024.0], [59.8, 5024.0], [59.9, 5024.0], [60.0, 5032.0], [60.1, 5032.0], [60.2, 5032.0], [60.3, 5032.0], [60.4, 5032.0], [60.5, 5083.0], [60.6, 5083.0], [60.7, 5083.0], [60.8, 5083.0], [60.9, 5106.0], [61.0, 5106.0], [61.1, 5106.0], [61.2, 5106.0], [61.3, 5106.0], [61.4, 5106.0], [61.5, 5106.0], [61.6, 5106.0], [61.7, 5107.0], [61.8, 5107.0], [61.9, 5107.0], [62.0, 5107.0], [62.1, 5126.0], [62.2, 5126.0], [62.3, 5126.0], [62.4, 5126.0], [62.5, 5134.0], [62.6, 5134.0], [62.7, 5134.0], [62.8, 5134.0], [62.9, 5134.0], [63.0, 5135.0], [63.1, 5135.0], [63.2, 5135.0], [63.3, 5135.0], [63.4, 5144.0], [63.5, 5144.0], [63.6, 5144.0], [63.7, 5144.0], [63.8, 5147.0], [63.9, 5147.0], [64.0, 5147.0], [64.1, 5147.0], [64.2, 5189.0], [64.3, 5189.0], [64.4, 5189.0], [64.5, 5189.0], [64.6, 5200.0], [64.7, 5200.0], [64.8, 5200.0], [64.9, 5200.0], [65.0, 5201.0], [65.1, 5201.0], [65.2, 5201.0], [65.3, 5201.0], [65.4, 5201.0], [65.5, 5201.0], [65.6, 5201.0], [65.7, 5201.0], [65.8, 5201.0], [65.9, 5225.0], [66.0, 5225.0], [66.1, 5225.0], [66.2, 5225.0], [66.3, 5241.0], [66.4, 5241.0], [66.5, 5241.0], [66.6, 5241.0], [66.7, 5241.0], [66.8, 5241.0], [66.9, 5241.0], [67.0, 5241.0], [67.1, 5241.0], [67.2, 5241.0], [67.3, 5241.0], [67.4, 5241.0], [67.5, 5298.0], [67.6, 5298.0], [67.7, 5298.0], [67.8, 5298.0], [67.9, 5298.0], [68.0, 5299.0], [68.1, 5299.0], [68.2, 5299.0], [68.3, 5299.0], [68.4, 5327.0], [68.5, 5327.0], [68.6, 5327.0], [68.7, 5327.0], [68.8, 5330.0], [68.9, 5330.0], [69.0, 5330.0], [69.1, 5330.0], [69.2, 5348.0], [69.3, 5348.0], [69.4, 5348.0], [69.5, 5348.0], [69.6, 5369.0], [69.7, 5369.0], [69.8, 5369.0], [69.9, 5369.0], [70.0, 5370.0], [70.1, 5370.0], [70.2, 5370.0], [70.3, 5370.0], [70.4, 5370.0], [70.5, 5388.0], [70.6, 5388.0], [70.7, 5388.0], [70.8, 5388.0], [70.9, 5426.0], [71.0, 5426.0], [71.1, 5426.0], [71.2, 5426.0], [71.3, 5485.0], [71.4, 5485.0], [71.5, 5485.0], [71.6, 5485.0], [71.7, 5565.0], [71.8, 5565.0], [71.9, 5565.0], [72.0, 5565.0], [72.1, 5572.0], [72.2, 5572.0], [72.3, 5572.0], [72.4, 5572.0], [72.5, 5602.0], [72.6, 5602.0], [72.7, 5602.0], [72.8, 5602.0], [72.9, 5602.0], [73.0, 5602.0], [73.1, 5602.0], [73.2, 5602.0], [73.3, 5602.0], [73.4, 5663.0], [73.5, 5663.0], [73.6, 5663.0], [73.7, 5663.0], [73.8, 5679.0], [73.9, 5679.0], [74.0, 5679.0], [74.1, 5679.0], [74.2, 5706.0], [74.3, 5706.0], [74.4, 5706.0], [74.5, 5706.0], [74.6, 5718.0], [74.7, 5718.0], [74.8, 5718.0], [74.9, 5718.0], [75.0, 5718.0], [75.1, 5718.0], [75.2, 5718.0], [75.3, 5718.0], [75.4, 5718.0], [75.5, 5736.0], [75.6, 5736.0], [75.7, 5736.0], [75.8, 5736.0], [75.9, 5736.0], [76.0, 5736.0], [76.1, 5736.0], [76.2, 5736.0], [76.3, 5797.0], [76.4, 5797.0], [76.5, 5797.0], [76.6, 5797.0], [76.7, 5799.0], [76.8, 5799.0], [76.9, 5799.0], [77.0, 5799.0], [77.1, 5914.0], [77.2, 5914.0], [77.3, 5914.0], [77.4, 5914.0], [77.5, 5914.0], [77.6, 5914.0], [77.7, 5914.0], [77.8, 5914.0], [77.9, 5914.0], [78.0, 5936.0], [78.1, 5936.0], [78.2, 5936.0], [78.3, 5936.0], [78.4, 5980.0], [78.5, 5980.0], [78.6, 5980.0], [78.7, 5980.0], [78.8, 6029.0], [78.9, 6029.0], [79.0, 6029.0], [79.1, 6029.0], [79.2, 6043.0], [79.3, 6043.0], [79.4, 6043.0], [79.5, 6043.0], [79.6, 6105.0], [79.7, 6105.0], [79.8, 6105.0], [79.9, 6105.0], [80.0, 6134.0], [80.1, 6134.0], [80.2, 6134.0], [80.3, 6134.0], [80.4, 6134.0], [80.5, 6261.0], [80.6, 6261.0], [80.7, 6261.0], [80.8, 6261.0], [80.9, 6262.0], [81.0, 6262.0], [81.1, 6262.0], [81.2, 6262.0], [81.3, 6301.0], [81.4, 6301.0], [81.5, 6301.0], [81.6, 6301.0], [81.7, 6301.0], [81.8, 6301.0], [81.9, 6301.0], [82.0, 6301.0], [82.1, 6342.0], [82.2, 6342.0], [82.3, 6342.0], [82.4, 6342.0], [82.5, 6342.0], [82.6, 6342.0], [82.7, 6342.0], [82.8, 6342.0], [82.9, 6342.0], [83.0, 6342.0], [83.1, 6342.0], [83.2, 6342.0], [83.3, 6342.0], [83.4, 6382.0], [83.5, 6382.0], [83.6, 6382.0], [83.7, 6382.0], [83.8, 6442.0], [83.9, 6442.0], [84.0, 6442.0], [84.1, 6442.0], [84.2, 6462.0], [84.3, 6462.0], [84.4, 6462.0], [84.5, 6462.0], [84.6, 6589.0], [84.7, 6589.0], [84.8, 6589.0], [84.9, 6589.0], [85.0, 6589.0], [85.1, 6589.0], [85.2, 6589.0], [85.3, 6589.0], [85.4, 6589.0], [85.5, 6666.0], [85.6, 6666.0], [85.7, 6666.0], [85.8, 6666.0], [85.9, 6667.0], [86.0, 6667.0], [86.1, 6667.0], [86.2, 6667.0], [86.3, 6746.0], [86.4, 6746.0], [86.5, 6746.0], [86.6, 6746.0], [86.7, 6747.0], [86.8, 6747.0], [86.9, 6747.0], [87.0, 6747.0], [87.1, 6747.0], [87.2, 6747.0], [87.3, 6747.0], [87.4, 6747.0], [87.5, 6747.0], [87.6, 6814.0], [87.7, 6814.0], [87.8, 6814.0], [87.9, 6814.0], [88.0, 6815.0], [88.1, 6815.0], [88.2, 6815.0], [88.3, 6815.0], [88.4, 6817.0], [88.5, 6817.0], [88.6, 6817.0], [88.7, 6817.0], [88.8, 6817.0], [88.9, 6817.0], [89.0, 6817.0], [89.1, 6817.0], [89.2, 6904.0], [89.3, 6904.0], [89.4, 6904.0], [89.5, 6904.0], [89.6, 6935.0], [89.7, 6935.0], [89.8, 6935.0], [89.9, 6935.0], [90.0, 6935.0], [90.1, 6935.0], [90.2, 6935.0], [90.3, 6935.0], [90.4, 6935.0], [90.5, 6940.0], [90.6, 6940.0], [90.7, 6940.0], [90.8, 6940.0], [90.9, 7083.0], [91.0, 7083.0], [91.1, 7083.0], [91.2, 7083.0], [91.3, 7083.0], [91.4, 7083.0], [91.5, 7083.0], [91.6, 7083.0], [91.7, 7083.0], [91.8, 7083.0], [91.9, 7083.0], [92.0, 7083.0], [92.1, 7111.0], [92.2, 7111.0], [92.3, 7111.0], [92.4, 7111.0], [92.5, 7111.0], [92.6, 7116.0], [92.7, 7116.0], [92.8, 7116.0], [92.9, 7116.0], [93.0, 7125.0], [93.1, 7125.0], [93.2, 7125.0], [93.3, 7125.0], [93.4, 7130.0], [93.5, 7130.0], [93.6, 7130.0], [93.7, 7130.0], [93.8, 7130.0], [93.9, 7130.0], [94.0, 7130.0], [94.1, 7130.0], [94.2, 7184.0], [94.3, 7184.0], [94.4, 7184.0], [94.5, 7184.0], [94.6, 7184.0], [94.7, 7184.0], [94.8, 7184.0], [94.9, 7184.0], [95.0, 7184.0], [95.1, 7234.0], [95.2, 7234.0], [95.3, 7234.0], [95.4, 7234.0], [95.5, 7286.0], [95.6, 7286.0], [95.7, 7286.0], [95.8, 7286.0], [95.9, 7287.0], [96.0, 7287.0], [96.1, 7287.0], [96.2, 7287.0], [96.3, 7288.0], [96.4, 7288.0], [96.5, 7288.0], [96.6, 7288.0], [96.7, 7384.0], [96.8, 7384.0], [96.9, 7384.0], [97.0, 7384.0], [97.1, 7389.0], [97.2, 7389.0], [97.3, 7389.0], [97.4, 7389.0], [97.5, 7389.0], [97.6, 7389.0], [97.7, 7389.0], [97.8, 7389.0], [97.9, 7389.0], [98.0, 7398.0], [98.1, 7398.0], [98.2, 7398.0], [98.3, 7398.0], [98.4, 7502.0], [98.5, 7502.0], [98.6, 7502.0], [98.7, 7502.0], [98.8, 7596.0], [98.9, 7596.0], [99.0, 7596.0], [99.1, 7596.0], [99.2, 7745.0], [99.3, 7745.0], [99.4, 7745.0], [99.5, 7745.0], [99.6, 9048.0], [99.7, 9048.0], [99.8, 9048.0], [99.9, 9048.0], [100.0, 9048.0]], "isOverall": false, "label": "HTTP Request 1", "isController": false}, {"data": [[0.0, 821.0], [0.1, 854.0], [0.2, 912.0], [0.3, 939.0], [0.4, 968.0], [0.5, 1078.0], [0.6, 1115.0], [0.7, 1126.0], [0.8, 1365.0], [0.9, 1482.0], [1.0, 1536.0], [1.1, 1537.0], [1.2, 1643.0], [1.3, 1686.0], [1.4, 1757.0], [1.5, 1809.0], [1.6, 1813.0], [1.7, 1813.0], [1.8, 1984.0], [1.9, 2022.0], [2.0, 2045.0], [2.1, 2046.0], [2.2, 2055.0], [2.3, 2058.0], [2.4, 2110.0], [2.5, 2151.0], [2.6, 2233.0], [2.7, 2376.0], [2.8, 2407.0], [2.9, 2501.0], [3.0, 2522.0], [3.1, 2524.0], [3.2, 2623.0], [3.3, 2629.0], [3.4, 2634.0], [3.5, 2684.0], [3.6, 2684.0], [3.7, 2696.0], [3.8, 2709.0], [3.9, 2716.0], [4.0, 2716.0], [4.1, 2734.0], [4.2, 2735.0], [4.3, 2736.0], [4.4, 2736.0], [4.5, 2753.0], [4.6, 2754.0], [4.7, 2770.0], [4.8, 2770.0], [4.9, 2770.0], [5.0, 2785.0], [5.1, 2797.0], [5.2, 2807.0], [5.3, 2836.0], [5.4, 2858.0], [5.5, 2858.0], [5.6, 2859.0], [5.7, 2875.0], [5.8, 2876.0], [5.9, 2876.0], [6.0, 2876.0], [6.1, 2876.0], [6.2, 2888.0], [6.3, 2901.0], [6.4, 2901.0], [6.5, 2901.0], [6.6, 2902.0], [6.7, 2905.0], [6.8, 2905.0], [6.9, 2932.0], [7.0, 2939.0], [7.1, 2939.0], [7.2, 2950.0], [7.3, 2978.0], [7.4, 2980.0], [7.5, 2983.0], [7.6, 3011.0], [7.7, 3043.0], [7.8, 3057.0], [7.9, 3074.0], [8.0, 3080.0], [8.1, 3081.0], [8.2, 3082.0], [8.3, 3082.0], [8.4, 3103.0], [8.5, 3107.0], [8.6, 3119.0], [8.7, 3128.0], [8.8, 3134.0], [8.9, 3178.0], [9.0, 3189.0], [9.1, 3191.0], [9.2, 3202.0], [9.3, 3222.0], [9.4, 3240.0], [9.5, 3240.0], [9.6, 3241.0], [9.7, 3241.0], [9.8, 3243.0], [9.9, 3244.0], [10.0, 3253.0], [10.1, 3253.0], [10.2, 3253.0], [10.3, 3279.0], [10.4, 3279.0], [10.5, 3293.0], [10.6, 3293.0], [10.7, 3293.0], [10.8, 3293.0], [10.9, 3294.0], [11.0, 3296.0], [11.1, 3350.0], [11.2, 3350.0], [11.3, 3380.0], [11.4, 3406.0], [11.5, 3435.0], [11.6, 3435.0], [11.7, 3436.0], [11.8, 3437.0], [11.9, 3448.0], [12.0, 3448.0], [12.1, 3449.0], [12.2, 3450.0], [12.3, 3451.0], [12.4, 3486.0], [12.5, 3487.0], [12.6, 3487.0], [12.7, 3488.0], [12.8, 3495.0], [12.9, 3506.0], [13.0, 3509.0], [13.1, 3510.0], [13.2, 3531.0], [13.3, 3540.0], [13.4, 3541.0], [13.5, 3541.0], [13.6, 3542.0], [13.7, 3549.0], [13.8, 3551.0], [13.9, 3552.0], [14.0, 3552.0], [14.1, 3553.0], [14.2, 3553.0], [14.3, 3553.0], [14.4, 3553.0], [14.5, 3560.0], [14.6, 3561.0], [14.7, 3576.0], [14.8, 3578.0], [14.9, 3602.0], [15.0, 3602.0], [15.1, 3617.0], [15.2, 3619.0], [15.3, 3619.0], [15.4, 3622.0], [15.5, 3623.0], [15.6, 3649.0], [15.7, 3650.0], [15.8, 3662.0], [15.9, 3662.0], [16.0, 3663.0], [16.1, 3663.0], [16.2, 3663.0], [16.3, 3664.0], [16.4, 3664.0], [16.5, 3665.0], [16.6, 3666.0], [16.7, 3672.0], [16.8, 3676.0], [16.9, 3679.0], [17.0, 3692.0], [17.1, 3693.0], [17.2, 3693.0], [17.3, 3694.0], [17.4, 3694.0], [17.5, 3694.0], [17.6, 3695.0], [17.7, 3695.0], [17.8, 3695.0], [17.9, 3695.0], [18.0, 3696.0], [18.1, 3696.0], [18.2, 3697.0], [18.3, 3698.0], [18.4, 3698.0], [18.5, 3698.0], [18.6, 3700.0], [18.7, 3745.0], [18.8, 3753.0], [18.9, 3754.0], [19.0, 3771.0], [19.1, 3772.0], [19.2, 3783.0], [19.3, 3783.0], [19.4, 3784.0], [19.5, 3794.0], [19.6, 3796.0], [19.7, 3799.0], [19.8, 3799.0], [19.9, 3799.0], [20.0, 3800.0], [20.1, 3806.0], [20.2, 3806.0], [20.3, 3825.0], [20.4, 3825.0], [20.5, 3825.0], [20.6, 3826.0], [20.7, 3827.0], [20.8, 3832.0], [20.9, 3833.0], [21.0, 3838.0], [21.1, 3839.0], [21.2, 3839.0], [21.3, 3841.0], [21.4, 3842.0], [21.5, 3842.0], [21.6, 3842.0], [21.7, 3842.0], [21.8, 3849.0], [21.9, 3849.0], [22.0, 3851.0], [22.1, 3851.0], [22.2, 3852.0], [22.3, 3854.0], [22.4, 3855.0], [22.5, 3856.0], [22.6, 3856.0], [22.7, 3856.0], [22.8, 3864.0], [22.9, 3876.0], [23.0, 3878.0], [23.1, 3878.0], [23.2, 3879.0], [23.3, 3879.0], [23.4, 3879.0], [23.5, 3879.0], [23.6, 3879.0], [23.7, 3880.0], [23.8, 3880.0], [23.9, 3899.0], [24.0, 3903.0], [24.1, 3903.0], [24.2, 3904.0], [24.3, 3904.0], [24.4, 3904.0], [24.5, 3905.0], [24.6, 3907.0], [24.7, 3907.0], [24.8, 3909.0], [24.9, 3924.0], [25.0, 3926.0], [25.1, 3929.0], [25.2, 3930.0], [25.3, 3930.0], [25.4, 3931.0], [25.5, 3932.0], [25.6, 3933.0], [25.7, 3933.0], [25.8, 3934.0], [25.9, 3934.0], [26.0, 3934.0], [26.1, 3935.0], [26.2, 3935.0], [26.3, 3948.0], [26.4, 3954.0], [26.5, 3958.0], [26.6, 3964.0], [26.7, 3964.0], [26.8, 3969.0], [26.9, 3977.0], [27.0, 3979.0], [27.1, 3980.0], [27.2, 3982.0], [27.3, 3986.0], [27.4, 3987.0], [27.5, 3987.0], [27.6, 3988.0], [27.7, 4001.0], [27.8, 4005.0], [27.9, 4026.0], [28.0, 4026.0], [28.1, 4026.0], [28.2, 4026.0], [28.3, 4027.0], [28.4, 4028.0], [28.5, 4036.0], [28.6, 4037.0], [28.7, 4043.0], [28.8, 4049.0], [28.9, 4050.0], [29.0, 4051.0], [29.1, 4051.0], [29.2, 4052.0], [29.3, 4057.0], [29.4, 4063.0], [29.5, 4064.0], [29.6, 4064.0], [29.7, 4064.0], [29.8, 4064.0], [29.9, 4065.0], [30.0, 4065.0], [30.1, 4065.0], [30.2, 4076.0], [30.3, 4078.0], [30.4, 4079.0], [30.5, 4079.0], [30.6, 4079.0], [30.7, 4080.0], [30.8, 4091.0], [30.9, 4095.0], [31.0, 4095.0], [31.1, 4096.0], [31.2, 4099.0], [31.3, 4100.0], [31.4, 4120.0], [31.5, 4124.0], [31.6, 4125.0], [31.7, 4125.0], [31.8, 4126.0], [31.9, 4126.0], [32.0, 4127.0], [32.1, 4127.0], [32.2, 4128.0], [32.3, 4129.0], [32.4, 4129.0], [32.5, 4129.0], [32.6, 4132.0], [32.7, 4136.0], [32.8, 4137.0], [32.9, 4137.0], [33.0, 4138.0], [33.1, 4139.0], [33.2, 4139.0], [33.3, 4141.0], [33.4, 4142.0], [33.5, 4142.0], [33.6, 4142.0], [33.7, 4144.0], [33.8, 4144.0], [33.9, 4146.0], [34.0, 4149.0], [34.1, 4149.0], [34.2, 4159.0], [34.3, 4162.0], [34.4, 4163.0], [34.5, 4164.0], [34.6, 4167.0], [34.7, 4167.0], [34.8, 4168.0], [34.9, 4168.0], [35.0, 4170.0], [35.1, 4171.0], [35.2, 4171.0], [35.3, 4172.0], [35.4, 4188.0], [35.5, 4189.0], [35.6, 4189.0], [35.7, 4190.0], [35.8, 4190.0], [35.9, 4191.0], [36.0, 4191.0], [36.1, 4195.0], [36.2, 4198.0], [36.3, 4199.0], [36.4, 4208.0], [36.5, 4208.0], [36.6, 4209.0], [36.7, 4224.0], [36.8, 4231.0], [36.9, 4237.0], [37.0, 4242.0], [37.1, 4242.0], [37.2, 4249.0], [37.3, 4256.0], [37.4, 4260.0], [37.5, 4261.0], [37.6, 4262.0], [37.7, 4263.0], [37.8, 4263.0], [37.9, 4263.0], [38.0, 4264.0], [38.1, 4264.0], [38.2, 4268.0], [38.3, 4269.0], [38.4, 4274.0], [38.5, 4275.0], [38.6, 4276.0], [38.7, 4277.0], [38.8, 4283.0], [38.9, 4292.0], [39.0, 4302.0], [39.1, 4303.0], [39.2, 4314.0], [39.3, 4316.0], [39.4, 4326.0], [39.5, 4328.0], [39.6, 4328.0], [39.7, 4329.0], [39.8, 4329.0], [39.9, 4329.0], [40.0, 4330.0], [40.1, 4330.0], [40.2, 4331.0], [40.3, 4331.0], [40.4, 4332.0], [40.5, 4336.0], [40.6, 4336.0], [40.7, 4336.0], [40.8, 4338.0], [40.9, 4346.0], [41.0, 4346.0], [41.1, 4362.0], [41.2, 4363.0], [41.3, 4364.0], [41.4, 4365.0], [41.5, 4372.0], [41.6, 4372.0], [41.7, 4372.0], [41.8, 4377.0], [41.9, 4379.0], [42.0, 4381.0], [42.1, 4382.0], [42.2, 4382.0], [42.3, 4382.0], [42.4, 4382.0], [42.5, 4390.0], [42.6, 4391.0], [42.7, 4391.0], [42.8, 4391.0], [42.9, 4391.0], [43.0, 4398.0], [43.1, 4405.0], [43.2, 4405.0], [43.3, 4406.0], [43.4, 4406.0], [43.5, 4409.0], [43.6, 4411.0], [43.7, 4412.0], [43.8, 4417.0], [43.9, 4418.0], [44.0, 4418.0], [44.1, 4419.0], [44.2, 4425.0], [44.3, 4426.0], [44.4, 4427.0], [44.5, 4434.0], [44.6, 4434.0], [44.7, 4435.0], [44.8, 4439.0], [44.9, 4440.0], [45.0, 4442.0], [45.1, 4442.0], [45.2, 4443.0], [45.3, 4443.0], [45.4, 4449.0], [45.5, 4454.0], [45.6, 4455.0], [45.7, 4461.0], [45.8, 4462.0], [45.9, 4462.0], [46.0, 4462.0], [46.1, 4463.0], [46.2, 4464.0], [46.3, 4474.0], [46.4, 4474.0], [46.5, 4474.0], [46.6, 4475.0], [46.7, 4475.0], [46.8, 4477.0], [46.9, 4477.0], [47.0, 4478.0], [47.1, 4478.0], [47.2, 4479.0], [47.3, 4482.0], [47.4, 4482.0], [47.5, 4484.0], [47.6, 4484.0], [47.7, 4484.0], [47.8, 4485.0], [47.9, 4485.0], [48.0, 4486.0], [48.1, 4486.0], [48.2, 4486.0], [48.3, 4486.0], [48.4, 4487.0], [48.5, 4488.0], [48.6, 4489.0], [48.7, 4492.0], [48.8, 4492.0], [48.9, 4506.0], [49.0, 4506.0], [49.1, 4507.0], [49.2, 4508.0], [49.3, 4508.0], [49.4, 4509.0], [49.5, 4509.0], [49.6, 4509.0], [49.7, 4511.0], [49.8, 4515.0], [49.9, 4517.0], [50.0, 4517.0], [50.1, 4518.0], [50.2, 4519.0], [50.3, 4521.0], [50.4, 4528.0], [50.5, 4531.0], [50.6, 4531.0], [50.7, 4532.0], [50.8, 4539.0], [50.9, 4540.0], [51.0, 4540.0], [51.1, 4541.0], [51.2, 4546.0], [51.3, 4549.0], [51.4, 4550.0], [51.5, 4550.0], [51.6, 4554.0], [51.7, 4555.0], [51.8, 4555.0], [51.9, 4556.0], [52.0, 4560.0], [52.1, 4562.0], [52.2, 4569.0], [52.3, 4569.0], [52.4, 4579.0], [52.5, 4580.0], [52.6, 4581.0], [52.7, 4582.0], [52.8, 4582.0], [52.9, 4583.0], [53.0, 4584.0], [53.1, 4586.0], [53.2, 4586.0], [53.3, 4587.0], [53.4, 4588.0], [53.5, 4589.0], [53.6, 4590.0], [53.7, 4590.0], [53.8, 4591.0], [53.9, 4592.0], [54.0, 4593.0], [54.1, 4594.0], [54.2, 4599.0], [54.3, 4602.0], [54.4, 4602.0], [54.5, 4602.0], [54.6, 4602.0], [54.7, 4602.0], [54.8, 4603.0], [54.9, 4603.0], [55.0, 4603.0], [55.1, 4607.0], [55.2, 4607.0], [55.3, 4608.0], [55.4, 4609.0], [55.5, 4610.0], [55.6, 4610.0], [55.7, 4610.0], [55.8, 4616.0], [55.9, 4616.0], [56.0, 4616.0], [56.1, 4617.0], [56.2, 4617.0], [56.3, 4619.0], [56.4, 4619.0], [56.5, 4625.0], [56.6, 4625.0], [56.7, 4627.0], [56.8, 4633.0], [56.9, 4633.0], [57.0, 4635.0], [57.1, 4635.0], [57.2, 4635.0], [57.3, 4636.0], [57.4, 4637.0], [57.5, 4640.0], [57.6, 4642.0], [57.7, 4643.0], [57.8, 4645.0], [57.9, 4645.0], [58.0, 4657.0], [58.1, 4658.0], [58.2, 4659.0], [58.3, 4659.0], [58.4, 4660.0], [58.5, 4660.0], [58.6, 4661.0], [58.7, 4661.0], [58.8, 4661.0], [58.9, 4662.0], [59.0, 4662.0], [59.1, 4662.0], [59.2, 4663.0], [59.3, 4666.0], [59.4, 4666.0], [59.5, 4667.0], [59.6, 4667.0], [59.7, 4667.0], [59.8, 4667.0], [59.9, 4668.0], [60.0, 4668.0], [60.1, 4668.0], [60.2, 4670.0], [60.3, 4670.0], [60.4, 4670.0], [60.5, 4678.0], [60.6, 4679.0], [60.7, 4683.0], [60.8, 4685.0], [60.9, 4689.0], [61.0, 4691.0], [61.1, 4697.0], [61.2, 4697.0], [61.3, 4699.0], [61.4, 4701.0], [61.5, 4717.0], [61.6, 4718.0], [61.7, 4720.0], [61.8, 4723.0], [61.9, 4724.0], [62.0, 4724.0], [62.1, 4725.0], [62.2, 4734.0], [62.3, 4736.0], [62.4, 4736.0], [62.5, 4745.0], [62.6, 4746.0], [62.7, 4747.0], [62.8, 4749.0], [62.9, 4757.0], [63.0, 4757.0], [63.1, 4757.0], [63.2, 4758.0], [63.3, 4787.0], [63.4, 4790.0], [63.5, 4794.0], [63.6, 4795.0], [63.7, 4797.0], [63.8, 4798.0], [63.9, 4798.0], [64.0, 4800.0], [64.1, 4800.0], [64.2, 4810.0], [64.3, 4812.0], [64.4, 4812.0], [64.5, 4812.0], [64.6, 4813.0], [64.7, 4814.0], [64.8, 4815.0], [64.9, 4815.0], [65.0, 4815.0], [65.1, 4815.0], [65.2, 4815.0], [65.3, 4816.0], [65.4, 4817.0], [65.5, 4822.0], [65.6, 4825.0], [65.7, 4825.0], [65.8, 4825.0], [65.9, 4826.0], [66.0, 4827.0], [66.1, 4828.0], [66.2, 4830.0], [66.3, 4833.0], [66.4, 4839.0], [66.5, 4839.0], [66.6, 4840.0], [66.7, 4841.0], [66.8, 4853.0], [66.9, 4867.0], [67.0, 4868.0], [67.1, 4879.0], [67.2, 4879.0], [67.3, 4879.0], [67.4, 4879.0], [67.5, 4879.0], [67.6, 4886.0], [67.7, 4891.0], [67.8, 4892.0], [67.9, 4900.0], [68.0, 4901.0], [68.1, 4910.0], [68.2, 4910.0], [68.3, 4918.0], [68.4, 4918.0], [68.5, 4919.0], [68.6, 4928.0], [68.7, 4929.0], [68.8, 4929.0], [68.9, 4931.0], [69.0, 4931.0], [69.1, 4931.0], [69.2, 4931.0], [69.3, 4932.0], [69.4, 4932.0], [69.5, 4932.0], [69.6, 4936.0], [69.7, 4937.0], [69.8, 4938.0], [69.9, 4939.0], [70.0, 4939.0], [70.1, 4939.0], [70.2, 4940.0], [70.3, 4940.0], [70.4, 4940.0], [70.5, 4940.0], [70.6, 4941.0], [70.7, 4941.0], [70.8, 4941.0], [70.9, 4941.0], [71.0, 4943.0], [71.1, 4953.0], [71.2, 4954.0], [71.3, 4955.0], [71.4, 4959.0], [71.5, 4960.0], [71.6, 4961.0], [71.7, 4972.0], [71.8, 4973.0], [71.9, 4983.0], [72.0, 4984.0], [72.1, 4984.0], [72.2, 4985.0], [72.3, 4986.0], [72.4, 4991.0], [72.5, 4991.0], [72.6, 4992.0], [72.7, 4992.0], [72.8, 4995.0], [72.9, 5003.0], [73.0, 5004.0], [73.1, 5008.0], [73.2, 5010.0], [73.3, 5024.0], [73.4, 5024.0], [73.5, 5025.0], [73.6, 5029.0], [73.7, 5036.0], [73.8, 5037.0], [73.9, 5037.0], [74.0, 5037.0], [74.1, 5037.0], [74.2, 5038.0], [74.3, 5041.0], [74.4, 5041.0], [74.5, 5042.0], [74.6, 5043.0], [74.7, 5043.0], [74.8, 5043.0], [74.9, 5050.0], [75.0, 5050.0], [75.1, 5051.0], [75.2, 5065.0], [75.3, 5078.0], [75.4, 5078.0], [75.5, 5081.0], [75.6, 5082.0], [75.7, 5085.0], [75.8, 5085.0], [75.9, 5086.0], [76.0, 5086.0], [76.1, 5102.0], [76.2, 5102.0], [76.3, 5103.0], [76.4, 5104.0], [76.5, 5105.0], [76.6, 5106.0], [76.7, 5113.0], [76.8, 5116.0], [76.9, 5118.0], [77.0, 5122.0], [77.1, 5123.0], [77.2, 5124.0], [77.3, 5127.0], [77.4, 5131.0], [77.5, 5131.0], [77.6, 5131.0], [77.7, 5132.0], [77.8, 5136.0], [77.9, 5137.0], [78.0, 5142.0], [78.1, 5144.0], [78.2, 5145.0], [78.3, 5151.0], [78.4, 5151.0], [78.5, 5153.0], [78.6, 5153.0], [78.7, 5154.0], [78.8, 5154.0], [78.9, 5155.0], [79.0, 5156.0], [79.1, 5161.0], [79.2, 5162.0], [79.3, 5167.0], [79.4, 5170.0], [79.5, 5171.0], [79.6, 5171.0], [79.7, 5172.0], [79.8, 5173.0], [79.9, 5173.0], [80.0, 5174.0], [80.1, 5177.0], [80.2, 5178.0], [80.3, 5188.0], [80.4, 5196.0], [80.5, 5198.0], [80.6, 5199.0], [80.7, 5200.0], [80.8, 5200.0], [80.9, 5201.0], [81.0, 5201.0], [81.1, 5201.0], [81.2, 5201.0], [81.3, 5201.0], [81.4, 5201.0], [81.5, 5202.0], [81.6, 5202.0], [81.7, 5223.0], [81.8, 5223.0], [81.9, 5223.0], [82.0, 5223.0], [82.1, 5225.0], [82.2, 5232.0], [82.3, 5232.0], [82.4, 5236.0], [82.5, 5245.0], [82.6, 5246.0], [82.7, 5248.0], [82.8, 5267.0], [82.9, 5270.0], [83.0, 5270.0], [83.1, 5284.0], [83.2, 5285.0], [83.3, 5286.0], [83.4, 5290.0], [83.5, 5296.0], [83.6, 5297.0], [83.7, 5301.0], [83.8, 5309.0], [83.9, 5310.0], [84.0, 5310.0], [84.1, 5318.0], [84.2, 5319.0], [84.3, 5320.0], [84.4, 5321.0], [84.5, 5322.0], [84.6, 5325.0], [84.7, 5325.0], [84.8, 5336.0], [84.9, 5337.0], [85.0, 5338.0], [85.1, 5368.0], [85.2, 5370.0], [85.3, 5371.0], [85.4, 5372.0], [85.5, 5373.0], [85.6, 5374.0], [85.7, 5376.0], [85.8, 5377.0], [85.9, 5378.0], [86.0, 5378.0], [86.1, 5379.0], [86.2, 5379.0], [86.3, 5379.0], [86.4, 5384.0], [86.5, 5384.0], [86.6, 5385.0], [86.7, 5386.0], [86.8, 5391.0], [86.9, 5396.0], [87.0, 5402.0], [87.1, 5410.0], [87.2, 5410.0], [87.3, 5416.0], [87.4, 5417.0], [87.5, 5420.0], [87.6, 5449.0], [87.7, 5450.0], [87.8, 5453.0], [87.9, 5454.0], [88.0, 5456.0], [88.1, 5458.0], [88.2, 5458.0], [88.3, 5458.0], [88.4, 5475.0], [88.5, 5476.0], [88.6, 5476.0], [88.7, 5496.0], [88.8, 5503.0], [88.9, 5503.0], [89.0, 5503.0], [89.1, 5504.0], [89.2, 5504.0], [89.3, 5504.0], [89.4, 5504.0], [89.5, 5505.0], [89.6, 5508.0], [89.7, 5508.0], [89.8, 5508.0], [89.9, 5509.0], [90.0, 5509.0], [90.1, 5509.0], [90.2, 5510.0], [90.3, 5523.0], [90.4, 5525.0], [90.5, 5525.0], [90.6, 5533.0], [90.7, 5538.0], [90.8, 5538.0], [90.9, 5539.0], [91.0, 5539.0], [91.1, 5539.0], [91.2, 5540.0], [91.3, 5540.0], [91.4, 5541.0], [91.5, 5550.0], [91.6, 5559.0], [91.7, 5559.0], [91.8, 5579.0], [91.9, 5580.0], [92.0, 5580.0], [92.1, 5585.0], [92.2, 5588.0], [92.3, 5589.0], [92.4, 5630.0], [92.5, 5633.0], [92.6, 5636.0], [92.7, 5636.0], [92.8, 5637.0], [92.9, 5641.0], [93.0, 5648.0], [93.1, 5681.0], [93.2, 5682.0], [93.3, 5684.0], [93.4, 5685.0], [93.5, 5686.0], [93.6, 5686.0], [93.7, 5692.0], [93.8, 5694.0], [93.9, 5695.0], [94.0, 5695.0], [94.1, 5704.0], [94.2, 5704.0], [94.3, 5704.0], [94.4, 5707.0], [94.5, 5707.0], [94.6, 5707.0], [94.7, 5708.0], [94.8, 5708.0], [94.9, 5708.0], [95.0, 5709.0], [95.1, 5710.0], [95.2, 5738.0], [95.3, 5759.0], [95.4, 5760.0], [95.5, 5765.0], [95.6, 5765.0], [95.7, 5790.0], [95.8, 5790.0], [95.9, 5790.0], [96.0, 5791.0], [96.1, 5796.0], [96.2, 5827.0], [96.3, 5828.0], [96.4, 5829.0], [96.5, 5829.0], [96.6, 5841.0], [96.7, 5842.0], [96.8, 5852.0], [96.9, 5854.0], [97.0, 5857.0], [97.1, 5857.0], [97.2, 5862.0], [97.3, 5871.0], [97.4, 5871.0], [97.5, 5872.0], [97.6, 5879.0], [97.7, 5904.0], [97.8, 5905.0], [97.9, 5907.0], [98.0, 5964.0], [98.1, 5995.0], [98.2, 6027.0], [98.3, 6080.0], [98.4, 6090.0], [98.5, 6091.0], [98.6, 6102.0], [98.7, 6191.0], [98.8, 6228.0], [98.9, 6374.0], [99.0, 6561.0], [99.1, 6665.0], [99.2, 6742.0], [99.3, 6930.0], [99.4, 6980.0], [99.5, 7041.0], [99.6, 7280.0], [99.7, 7426.0], [99.8, 8652.0], [99.9, 9179.0]], "isOverall": false, "label": "HTTP Request 3", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 142.0, "series": [{"data": [[900.0, 19.0], [1000.0, 6.0], [1100.0, 6.0], [1200.0, 4.0], [1300.0, 1.0], [1400.0, 2.0], [1500.0, 1.0], [1800.0, 2.0], [2100.0, 1.0], [2300.0, 3.0], [2200.0, 1.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 1.0], [2800.0, 2.0], [2700.0, 1.0], [2900.0, 1.0], [3000.0, 5.0], [3100.0, 2.0], [3300.0, 1.0], [3200.0, 1.0], [3500.0, 2.0], [3600.0, 2.0], [3700.0, 6.0], [3800.0, 3.0], [4000.0, 5.0], [4200.0, 4.0], [4100.0, 11.0], [4300.0, 8.0], [4600.0, 16.0], [4500.0, 11.0], [4400.0, 8.0], [4800.0, 12.0], [4700.0, 4.0], [5100.0, 8.0], [4900.0, 5.0], [5000.0, 5.0], [5200.0, 7.0], [5300.0, 10.0], [5500.0, 7.0], [5400.0, 6.0], [5600.0, 5.0], [5700.0, 2.0], [5800.0, 5.0], [6000.0, 5.0], [6100.0, 1.0], [6500.0, 2.0], [6400.0, 1.0], [6600.0, 2.0], [6800.0, 2.0], [7100.0, 2.0], [7000.0, 1.0], [7200.0, 2.0], [7300.0, 2.0], [7500.0, 4.0], [7700.0, 1.0]], "isOverall": false, "label": "HTTP Request 2", "isController": false}, {"data": [[1300.0, 30.0], [1400.0, 5.0], [1500.0, 8.0], [1600.0, 7.0], [1700.0, 3.0], [2100.0, 2.0], [2300.0, 5.0], [2500.0, 2.0], [2800.0, 2.0], [2700.0, 1.0], [2900.0, 1.0], [3300.0, 1.0], [3200.0, 1.0], [3400.0, 3.0], [3700.0, 3.0], [3800.0, 5.0], [3900.0, 1.0], [4200.0, 3.0], [4100.0, 8.0], [4300.0, 7.0], [4600.0, 6.0], [4500.0, 5.0], [4400.0, 3.0], [4700.0, 7.0], [4800.0, 12.0], [5100.0, 9.0], [4900.0, 9.0], [5000.0, 6.0], [5200.0, 9.0], [5300.0, 6.0], [5600.0, 4.0], [5400.0, 2.0], [5500.0, 2.0], [5700.0, 7.0], [6100.0, 2.0], [5900.0, 4.0], [6000.0, 2.0], [6200.0, 2.0], [6300.0, 6.0], [6500.0, 2.0], [6400.0, 2.0], [6600.0, 2.0], [6900.0, 4.0], [6800.0, 4.0], [6700.0, 3.0], [7100.0, 7.0], [7000.0, 3.0], [7200.0, 4.0], [7300.0, 4.0], [7500.0, 2.0], [7700.0, 1.0], [9000.0, 1.0]], "isOverall": false, "label": "HTTP Request 1", "isController": false}, {"data": [[800.0, 4.0], [900.0, 6.0], [1000.0, 1.0], [1100.0, 4.0], [1300.0, 2.0], [1400.0, 1.0], [1500.0, 5.0], [1600.0, 4.0], [1700.0, 2.0], [1800.0, 6.0], [1900.0, 1.0], [2000.0, 11.0], [2100.0, 4.0], [2300.0, 2.0], [2200.0, 3.0], [2400.0, 1.0], [2500.0, 6.0], [2600.0, 12.0], [2800.0, 23.0], [2700.0, 28.0], [2900.0, 26.0], [3000.0, 16.0], [3100.0, 15.0], [3300.0, 5.0], [3200.0, 39.0], [3400.0, 31.0], [3500.0, 38.0], [3700.0, 27.0], [3600.0, 75.0], [3800.0, 80.0], [3900.0, 74.0], [4000.0, 73.0], [4300.0, 83.0], [4100.0, 101.0], [4200.0, 52.0], [4600.0, 142.0], [4500.0, 107.0], [4400.0, 117.0], [4800.0, 78.0], [4700.0, 53.0], [5100.0, 92.0], [4900.0, 99.0], [5000.0, 65.0], [5200.0, 60.0], [5300.0, 65.0], [5500.0, 72.0], [5600.0, 35.0], [5400.0, 36.0], [5800.0, 31.0], [5700.0, 41.0], [6100.0, 4.0], [6000.0, 9.0], [5900.0, 9.0], [6300.0, 1.0], [6200.0, 2.0], [6400.0, 1.0], [6500.0, 2.0], [6600.0, 2.0], [6700.0, 2.0], [6900.0, 3.0], [7000.0, 2.0], [7300.0, 1.0], [7200.0, 2.0], [7400.0, 1.0], [8300.0, 1.0], [8600.0, 1.0], [9100.0, 1.0], [8800.0, 1.0], [9400.0, 1.0]], "isOverall": false, "label": "HTTP Request 3", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 92.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 2388.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 92.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [[2.0, 2388.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.6, "minX": 1.75002282E12, "maxY": 99.36779794790849, "series": [{"data": [[1.75002282E12, 3.7272727272727275], [1.75002294E12, 9.241379310344831], [1.75002288E12, 10.601769911504421]], "isOverall": false, "label": "Middle cost config", "isController": false}, {"data": [[1.75002282E12, 54.880794701986744], [1.75002294E12, 77.86597938144325], [1.75002288E12, 99.36779794790849]], "isOverall": false, "label": "High cost config", "isController": false}, {"data": [[1.75002282E12, 3.6], [1.75002294E12, 9.520000000000005], [1.75002288E12, 10.56190476190476]], "isOverall": false, "label": "Low cost config", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75002294E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 821.0, "minX": 1.0, "maxY": 7745.0, "series": [{"data": [[2.0, 920.0], [4.0, 924.0], [5.0, 955.0], [7.0, 931.0], [8.0, 942.0], [9.0, 942.25], [10.0, 946.0], [12.0, 1000.1666666666666], [14.0, 1052.4], [16.0, 1155.5], [17.0, 2758.0], [18.0, 1218.0], [21.0, 1502.5], [24.0, 1401.0], [27.0, 1306.0], [29.0, 1247.0], [33.0, 1659.3333333333333], [34.0, 4600.0], [43.0, 2325.0], [42.0, 2488.0], [49.0, 7745.0], [50.0, 3209.0], [51.0, 2395.5], [55.0, 2503.0], [59.0, 2522.0], [61.0, 2685.0], [63.0, 3023.25], [66.0, 5882.0], [67.0, 4390.0], [70.0, 3490.8], [79.0, 3798.0], [78.0, 3128.0], [77.0, 4078.0], [76.0, 4239.0], [80.0, 5723.0], [86.0, 5234.333333333333], [87.0, 4882.0], [90.0, 3666.0], [88.0, 4384.0], [95.0, 3544.0], [94.0, 3791.0], [96.0, 4447.0], [103.0, 5297.0], [101.0, 5310.5], [104.0, 6498.0], [106.0, 5517.333333333333], [109.0, 5891.333333333333], [108.0, 3829.0], [114.0, 4038.0], [115.0, 4642.666666666667], [113.0, 5248.0], [112.0, 5451.666666666667], [116.0, 4278.333333333333], [118.0, 5017.555555555556], [119.0, 5583.0], [120.0, 5013.9], [122.0, 4520.2666666666655], [123.0, 4491.0], [124.0, 5383.481481481482]], "isOverall": false, "label": "HTTP Request 2", "isController": false}, {"data": [[92.37916666666658, 4186.541666666663]], "isOverall": false, "label": "HTTP Request 2-Aggregated", "isController": false}, {"data": [[3.0, 1323.0], [4.0, 1337.0], [5.0, 1357.0], [6.0, 1331.0], [7.0, 1330.0], [8.0, 1340.4], [9.0, 1350.75], [10.0, 1346.0], [11.0, 1350.0], [12.0, 1381.777777777778], [13.0, 1451.5], [14.0, 1494.0], [15.0, 1501.0], [16.0, 1562.6], [17.0, 2971.0], [18.0, 1636.5], [24.0, 1704.75], [26.0, 2196.0], [33.0, 2322.1666666666665], [34.0, 4601.0], [49.0, 7745.0], [50.0, 2968.4], [55.0, 2824.0], [57.0, 2974.0], [61.0, 3975.0], [60.0, 3790.0], [66.0, 7234.0], [67.0, 4535.5], [70.0, 4040.6], [78.0, 4339.6], [77.0, 4208.0], [85.0, 7398.0], [86.0, 5134.5], [90.0, 3943.0], [88.0, 4563.75], [92.0, 7125.0], [94.0, 6462.0], [98.0, 4810.0], [101.0, 6342.0], [106.0, 5663.0], [107.0, 3867.0], [109.0, 6680.25], [111.0, 6935.0], [108.0, 4182.666666666667], [114.0, 4506.333333333333], [115.0, 5348.0], [116.0, 4713.375], [118.0, 5657.2], [119.0, 7130.0], [117.0, 4434.5], [120.0, 5541.0], [122.0, 5189.0], [124.0, 5842.439999999999], [1.0, 1327.5]], "isOverall": false, "label": "HTTP Request 1", "isController": false}, {"data": [[85.20000000000003, 4385.895833333332]], "isOverall": false, "label": "HTTP Request 1-Aggregated", "isController": false}, {"data": [[16.0, 4076.0], [17.0, 3979.0], [19.0, 821.0], [20.0, 835.0], [21.0, 854.0], [22.0, 1150.0], [23.0, 1126.0], [24.0, 1115.0], [25.0, 4173.875], [26.0, 1078.0], [27.0, 1103.0], [28.0, 990.0], [29.0, 968.0], [30.0, 912.0], [33.0, 939.0], [32.0, 940.0], [34.0, 5254.75], [35.0, 3061.5], [40.0, 1473.2857142857142], [42.0, 4077.3999999999996], [43.0, 1482.0], [45.0, 2055.0], [44.0, 1380.0], [46.0, 1984.0], [48.0, 6012.0], [49.0, 7041.666666666667], [50.0, 3721.36], [51.0, 2110.5], [53.0, 2058.0], [55.0, 1812.2], [56.0, 4553.0], [57.0, 1786.0], [59.0, 2188.3333333333335], [60.0, 3668.5714285714284], [61.0, 2744.7272727272725], [63.0, 2907.0], [62.0, 3554.0], [66.0, 4090.4999999999995], [67.0, 4389.812499999999], [64.0, 2949.9], [70.0, 2747.789473684211], [68.0, 2700.6666666666665], [74.0, 5157.428571428571], [75.0, 4684.25], [73.0, 2150.0], [72.0, 3851.0], [79.0, 2949.083333333333], [78.0, 2954.6363636363635], [77.0, 3919.5], [76.0, 3628.6666666666665], [82.0, 4483.5], [81.0, 3969.125], [80.0, 3240.5], [85.0, 5887.166666666667], [86.0, 5220.038461538461], [84.0, 4531.0], [91.0, 4160.2], [90.0, 3684.6250000000005], [88.0, 4324.2], [94.0, 4192.35294117647], [95.0, 3202.0], [93.0, 3450.0], [92.0, 3450.6666666666665], [97.0, 5628.91304347826], [98.0, 4043.5], [96.0, 3541.5], [103.0, 5131.0], [101.0, 4147.2], [100.0, 3822.0], [104.0, 6367.818181818183], [105.0, 5249.0], [106.0, 5498.428571428572], [107.0, 4244.5], [111.0, 4614.840000000001], [109.0, 4068.6923076923076], [108.0, 3747.5], [114.0, 3698.1823899371075], [115.0, 4406.15], [113.0, 5075.777777777777], [112.0, 4372.900000000001], [116.0, 4049.1355932203387], [118.0, 4589.480000000001], [119.0, 5129.157894736843], [117.0, 3844.9285714285716], [120.0, 4296.2566371681405], [122.0, 4370.374100719423], [121.0, 5081.4], [124.0, 4873.767287234045]], "isOverall": false, "label": "HTTP Request 3", "isController": false}, {"data": [[109.75799999999985, 4441.959000000007]], "isOverall": false, "label": "HTTP Request 3-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 124.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 455.8, "minX": 1.75002282E12, "maxY": 5717.25, "series": [{"data": [[1.75002282E12, 662.2], [1.75002294E12, 3168.55], [1.75002288E12, 5717.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75002282E12, 455.8], [1.75002294E12, 2180.95], [1.75002288E12, 3935.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75002294E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3178.6551724137944, "minX": 1.75002282E12, "maxY": 5570.647619047619, "series": [{"data": [[1.75002282E12, 5305.454545454546], [1.75002294E12, 3178.6551724137944], [1.75002288E12, 5112.265486725662]], "isOverall": false, "label": "HTTP Request 2", "isController": false}, {"data": [[1.75002282E12, 5475.3], [1.75002294E12, 3303.551999999999], [1.75002288E12, 5570.647619047619]], "isOverall": false, "label": "HTTP Request 1", "isController": false}, {"data": [[1.75002282E12, 4871.5629139072835], [1.75002294E12, 4027.4295532646024], [1.75002288E12, 4581.174427782162]], "isOverall": false, "label": "HTTP Request 3", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75002294E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3178.6551724137944, "minX": 1.75002282E12, "maxY": 5570.638095238095, "series": [{"data": [[1.75002282E12, 5305.454545454546], [1.75002294E12, 3178.6551724137944], [1.75002288E12, 5112.2477876106195]], "isOverall": false, "label": "HTTP Request 2", "isController": false}, {"data": [[1.75002282E12, 5475.3], [1.75002294E12, 3303.551999999999], [1.75002288E12, 5570.638095238095]], "isOverall": false, "label": "HTTP Request 1", "isController": false}, {"data": [[1.75002282E12, 4871.556291390727], [1.75002294E12, 4027.4295532646024], [1.75002288E12, 4581.17127071823]], "isOverall": false, "label": "HTTP Request 3", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75002294E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.056000000000000015, "minX": 1.75002282E12, "maxY": 0.5000000000000001, "series": [{"data": [[1.75002282E12, 0.3636363636363637], [1.75002294E12, 0.10344827586206895], [1.75002288E12, 0.09734513274336284]], "isOverall": false, "label": "HTTP Request 2", "isController": false}, {"data": [[1.75002282E12, 0.5000000000000001], [1.75002294E12, 0.056000000000000015], [1.75002288E12, 0.07619047619047618]], "isOverall": false, "label": "HTTP Request 1", "isController": false}, {"data": [[1.75002282E12, 0.28476821192052965], [1.75002294E12, 0.07731958762886601], [1.75002288E12, 0.06945540647198115]], "isOverall": false, "label": "HTTP Request 3", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75002294E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 821.0, "minX": 1.75002282E12, "maxY": 9486.0, "series": [{"data": [[1.75002282E12, 7745.0], [1.75002294E12, 7598.0], [1.75002288E12, 9486.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75002282E12, 2889.0], [1.75002294E12, 821.0], [1.75002288E12, 2622.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75002282E12, 6059.9000000000015], [1.75002294E12, 5380.0], [1.75002288E12, 5686.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75002282E12, 7745.0], [1.75002294E12, 7130.0], [1.75002288E12, 7294.56000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75002282E12, 4904.0], [1.75002294E12, 4076.0], [1.75002288E12, 4659.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.75002282E12, 6841.599999999999], [1.75002294E12, 5790.8], [1.75002288E12, 5963.4]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75002294E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1332.5, "minX": 1.0, "maxY": 5580.0, "series": [{"data": [[2.0, 1332.5], [35.0, 5127.0], [34.0, 3126.5], [36.0, 5134.5], [38.0, 4559.5], [39.0, 4602.0], [40.0, 3551.0], [42.0, 4850.5], [43.0, 4661.5], [45.0, 4057.0], [46.0, 4190.0], [47.0, 4932.0], [3.0, 2387.5], [48.0, 4990.0], [49.0, 4830.0], [50.0, 5171.0], [51.0, 4332.0], [52.0, 4209.0], [55.0, 3672.0], [4.0, 4185.0], [5.0, 1393.0], [6.0, 1335.5], [7.0, 3987.0], [8.0, 4586.0], [9.0, 2373.5], [10.0, 5185.0], [11.0, 4455.0], [12.0, 4634.5], [13.0, 5580.0], [14.0, 4667.0], [15.0, 3935.0], [1.0, 1349.0], [16.0, 4644.5], [17.0, 4484.0], [18.0, 4816.0], [19.0, 4700.0], [21.0, 4670.0], [22.0, 5041.0], [23.0, 5285.0], [24.0, 4852.0], [25.0, 4941.0], [26.0, 4484.5], [27.0, 1686.0], [28.0, 4434.5], [29.0, 3909.0], [30.0, 5153.5], [31.0, 5085.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 55.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1332.5, "minX": 1.0, "maxY": 5580.0, "series": [{"data": [[2.0, 1332.5], [35.0, 5127.0], [34.0, 3126.5], [36.0, 5134.5], [38.0, 4559.5], [39.0, 4602.0], [40.0, 3551.0], [42.0, 4850.5], [43.0, 4661.5], [45.0, 4057.0], [46.0, 4190.0], [47.0, 4932.0], [3.0, 2387.5], [48.0, 4990.0], [49.0, 4830.0], [50.0, 5171.0], [51.0, 4332.0], [52.0, 4209.0], [55.0, 3672.0], [4.0, 4185.0], [5.0, 1393.0], [6.0, 1335.5], [7.0, 3987.0], [8.0, 4586.0], [9.0, 2373.5], [10.0, 5185.0], [11.0, 4455.0], [12.0, 4634.5], [13.0, 5580.0], [14.0, 4667.0], [15.0, 3935.0], [1.0, 1349.0], [16.0, 4644.5], [17.0, 4484.0], [18.0, 4816.0], [19.0, 4700.0], [21.0, 4670.0], [22.0, 5041.0], [23.0, 5285.0], [24.0, 4852.0], [25.0, 4941.0], [26.0, 4484.5], [27.0, 1686.0], [28.0, 4434.5], [29.0, 3909.0], [30.0, 5153.5], [31.0, 5085.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 55.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.3, "minX": 1.75002282E12, "maxY": 25.383333333333333, "series": [{"data": [[1.75002282E12, 4.3], [1.75002294E12, 11.65], [1.75002288E12, 25.383333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75002294E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.8666666666666667, "minX": 1.75002282E12, "maxY": 24.75, "series": [{"data": [[1.75002282E12, 2.8666666666666667], [1.75002294E12, 13.716666666666667], [1.75002288E12, 24.75]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75002294E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.75002282E12, "maxY": 21.116666666666667, "series": [{"data": [[1.75002282E12, 2.5166666666666666], [1.75002294E12, 9.7], [1.75002288E12, 21.116666666666667]], "isOverall": false, "label": "HTTP Request 3-success", "isController": false}, {"data": [[1.75002282E12, 0.18333333333333332], [1.75002294E12, 1.9333333333333333], [1.75002288E12, 1.8833333333333333]], "isOverall": false, "label": "HTTP Request 2-success", "isController": false}, {"data": [[1.75002282E12, 0.16666666666666666], [1.75002294E12, 2.0833333333333335], [1.75002288E12, 1.75]], "isOverall": false, "label": "HTTP Request 1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75002294E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.8666666666666667, "minX": 1.75002282E12, "maxY": 24.75, "series": [{"data": [[1.75002282E12, 2.8666666666666667], [1.75002294E12, 13.716666666666667], [1.75002288E12, 24.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75002294E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

